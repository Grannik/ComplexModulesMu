 *** Некоторые настройки прогаммы menu_mu ***

  22 Задаёт цикл для очистки строк меню      for (int i = 0; i <= 27; i++) { задаёт цикл для очистки строк меню (0–27, всего 28 строк).
  23 Ширина области для отрисовки рамки      mvprintw(i, 0, "%*s", 64, ""); Влияет на ширину области для отрисовки рамки и содержимого меню.
  28 Задаёт ширину верхней рамки меню        int total_width = 64; Задаёт ширину верхней рамки меню в функции draw_menu. Определяет, сколько символов (включая ╔ и ╗) занимает рамка, влияя на отображение заголовка меню.
  37 Цикл боковых рамок.                     for (int i = 1; i <= 27; i++) {
  94 Выделяет буфер для хранения заголовка   wchar_t title_buf[1025]; выделяет буфер для хранения заголовка меню (форматированного текста с тегами). Размер 1025 символов задаёт максимальную длину строки, включая завершающий нуль, для обработки текста в функции parse_tags (строка 97). Это обеспечивает место для текста заголовка, определённого в строке 87 (L"<r>     *** Информацию о тегах в меню ***").
  95 выделяет массив для хранения атрибутов  attr_t attributes[1024]; Строка attr_t attributes[1024]; выделяет массив для хранения атрибутов (цвет, стиль) каждого символа заголовка меню (title_buf). Используется в функции parse_tags
  97 задаёт максимальную длину строки        parse_tags(title, title_buf, 1024, attributes, &attr_count); Параметр 1024 задаёт максимальную длину обрабатываемой строки, исключая завершающий нуль.
  98 Вывод заголовка меню                    print_tagged_text(title_buf, 2, 1, attributes, attr_count, 62); отвечает за вывод отформатированного заголовка меню (*** Информацию о тегах в меню ***) в позиции (x=2, y=1) с шириной области 62 символа.
 102 буфер для хранения текста шапки         wchar_t header_buf[1025]; Строка wchar_t header_buf[1025]; выделяет буфер для хранения текста шапки таблицы меню
 106 влияние на заголовок                    print_tagged_text(header_buf, 2, 3, attributes, attr_count, 62); Выводит отформатированный заголовок таблицы меню в позиции (x=2, y=3) с шириной 62 символа, применяя атрибуты тегов.
 114 влияние на текст боди                   print_tagged_text(body_buf, 3, 23, attributes, attr_count, 62); Эта строка выводит тело меню (список пунктов) в позиции (x=3, y=23) с шириной 62 символа, применяя атрибуты тегов для форматирования текста. Она отвечает за отображение содержимого меню в интерфейсе.
 122 Выводит футер меню                      print_tagged_text(footer_buf, 3, 26, attributes, attr_count, 64); Эта строка выводит футер меню (инструкции управления) в позиции (x=3, y=26) с шириной 64 символа, применяя атрибуты тегов для форматирования текста.
 242 Начальная Y-координата для пунктов меню int start_y = 6; задаёт переменную start_y значением 6, определяя начальную Y-координату для отрисовки пунктов меню в функции print_menu_items.
 244 Область темного перекрытия меню         for (int i = 0; i < 16; i++) {
 255 Очищает область меню                    for (int i = 0; i < 15; i++) { Строка очищает область меню, заполняя 15 строк пробелами, начиная с позиции start_y, для подготовки к отрисовке пунктов меню.
 256 Ширина очистки следа после бегунка.     mvprintw(start_y + i, 2, "%*s", 60, ""); отвечает за очистку области меню. Она выводит строку из 60 пробелов на экране, начиная с позиции (x=2, y=start_y + i), чтобы стереть предыдущее содержимое перед отрисовкой пунктов меню. Это обеспечивает чистое отображение интерфейса в библиотеке ncurses.
 259 Очищает область меню перед отрисовкой   for (int i = 0; i < 15; i++) { начинает цикл, который очищает область меню перед отрисовкой пунктов.
 261 Ограничение вывода пунктов меню         if (item_index >= 22) break; отвечает за ограничение вывода пунктов меню, чтобы индекс item_index не превышал максимальное количество пунктов меню (22, заданное в max_items в menu_mu.conf), предотвращая доступ за пределы массива items.
     - Заполнение символами -
 267 Заполнение пустоты слева                wchar_t wch = L'▒';
 295 Заменяем пробелы 1-го и 3-го столбца    wch = L'-';
 299 Заменяем пробелы 2-го и 4-го столбца    wch = L'=';
 317 Заполнение пустоты справа               wchar_t wch = L'+';

 276 обрабатывает вывод выделенного пункта   while (*ptr && x < 60 + 2 && y < start_y + 16) { Этот цикл обрабатывает вывод выделенного пункта меню, включая замену пробелов на ▒.
 279 Визуальное выделение текущего элемента  for (int j = 0; j < 60; j++) { начинает цикл, который заполняет область шириной 60 символов символами подсветки (▒) для выделенного пункта меню. Это обеспечивает визуальное выделение текущего элемента в интерфейсе ncurses.
 290 Управляет циклом обработки пункта меню  while (*ptr && x < 60 + 2 && y < start_y + 15) { управляет циклом обработки текста пункта меню при его выделении в ncurses. Она проверяет, что строка не закончилась (*ptr), горизонтальная позиция x не превышает ширину выделения (62 символа), и вертикальная позиция y находится в пределах видимой области меню (start_y + 15). Это обеспечивает правильное отображение подсветки и текста пункта меню.
 315 Пробел заменяется на символ подсветки   if (!in_column && !in_star && wch == L' ' && x < 60 + 1) { проверяет, находится ли текущий символ вне столбца (|) или выделения (*), является ли он пробелом, и находится ли позиция x в пределах области выделения (61 символ). Если условия выполняются, пробел заменяется на символ подсветки (▒), чтобы визуально выделить пункт меню в интерфейсе ncurses.
 333 Эта строка завершает подсветку строки   while (x < 61) { Эта строка завершает подсветку строки пункта меню, заполняя пробелы символами ▒ до заданной ширины (61 символ). Это создаёт единый фон для выделенного пункта, улучшая визуальную целостность интерфейса.
 341 Управляет циклом вывода пункта меню     while (*ptr && x < 62 && y < start_y + 15) {  управляет циклом вывода текста пункта меню, который не выделен. Проверяет, что строка не закончилась (*ptr). Ограничивает вывод текста по горизонтали до 62 символов (x < 61 + 1). Ограничивает вывод по вертикали до видимой высоты меню.
 351 Переход на нижний пункт меню            if (*selected < 0) *selected = 22; отвечает за обработку случая, когда пользователь нажимает клавишу вверх (KEY_UP)
 353 Переход на нижний пункт меню             *offset = (*selected >= *offset + 15) ? *selected - 14 : *offset;
 358 Переход наверх.                         if (*selected >= 22) *selected = 0; Номер пункта меню, с которого переход наверх.
 368 управляет количеством строк деталей     for (int i = 0; i < items[*selected].detail_lines && i < 30; i++) { Эта строка управляет количеством строк деталей, выводимых для выбранного пункта меню.
 368 Отвечает за циклическую навигацию вверх if (*selected < 0) *selected = 21; отвечает за циклическую навигацию вверх по меню: если индекс выбранного пункта (selected) становится меньше 0, он устанавливается в последний пункт меню (21, так как max_items=22).
 370 Корректирует смещение (offset)          *offset = (*selected >= *offset + 15) ? *selected - 14 : *offset; Эта строка в функции handle_input корректирует смещение (offset) при движении вверх (клавиша KEY_UP). Если выбранный пункт (selected) выходит за пределы видимой области меню (15 пунктов, заданных visible_height), offset устанавливается так, чтобы выбранный пункт оставался в видимой области.
 375 Отвечает за циклическую навигацию вниз  if (*selected >= 22) *selected = 0; отвечает за циклическую навигацию вниз по меню: если индекс выбранного пункта (selected) достигает или превышает 22, он сбрасывается на 0, переходя к первому пункту меню.
 377 Корректирует смещение *offset           *offset = (*selected >= *offset + 15) ? *selected - 14 : *offset; Что делает: Корректирует смещение *offset для отображения видимой области меню (15 пунктов), если выбранный пункт *selected выходит за её пределы при движении вниз. За что отвечает: Обеспечивает, чтобы выбранный пункт меню оставался в видимой части списка, сдвигая начало списка (*offset) так, чтобы *selected был в пределах 15 строк.
 390 Вывод отформатированного текста         print_tagged_text(detail_buf, 0, y++, attributes, attr_count, 64); отвечает за вывод отформатированного текста из буфера detail_buf в интерфейсе программы, используя библиотеку ncurses. Она отображает детали выбранного пункта меню на экране, начиная с позиции x=0 и увеличивая координату y для каждой новой строки. Параметры attributes и attr_count задают стили текста (например, цвет, жирность), а 64 определяет максимальную ширину вывода. Эта строка вызывается при обработке выбора пункта меню для отображения подробной информации.
 486 отвечает за проверку размеров терминала if (LINES < iface_config.frame_height || COLS < 68) { отвечает за проверку размеров терминала перед запуском программы. Она сравнивает количество строк (LINES) с высотой рамки интерфейса (iface_config.frame_height, равной 27 из menu_mu.conf) и количество столбцов (COLS) с шириной меню (68, из конфигурации). Если терминал меньше этих значений, программа выводит сообщение об ошибке и завершается, чтобы обеспечить корректное отображение интерфейса.
 488 Вывод ошибки                            printf("\033[1;31mError:\033[0m \033[31mTerminal is too small. Requires at least %dx%d.\n\033[0m", 68, iface_config.frame_height);
 490 Отвечает за выделение массива items     MenuItem items[22]; отвечает за выделение массива items размером 22 элемента (по значению max_items) для хранения пунктов меню в функции main.
